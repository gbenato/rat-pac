/**
 * @class DS::MCPMT
 *  Data Structure: Hit PMT in Monte Carlo
 *
 *  @author Stan Seibert <sseibert@hep.upenn.edu>
 *
 *  This class represents a PMT in which at least one photoelectron
 *  was generated by an incident photon.
 */

#ifndef __RAT_DS_MCPMT__
#define __RAT_DS_MCPMT__

#include <vector>
#include <RAT/DS/MCPhoton.hh>
#include <RAT/Log.hh>
//#include <RAT/DS/PMTWaveform.hh>

namespace RAT {
  namespace DS {

class MCPMT : public TObject {
public:
  MCPMT() : TObject() {}
  virtual ~MCPMT() {}

  /** ID number */
  virtual Int_t GetID() const { return id; };
  virtual void SetID(Int_t _id) { id = _id; };

  /** Charge */
  virtual Float_t GetCharge() const;

  /** Time */
  virtual void SetTime() {time = this->GetTime();};
  virtual Float_t GetTime() const;

  /** FETime */
  virtual void SetFrontEndTime() {feTime = this->GetFrontEndTime();};
  virtual Float_t GetFrontEndTime() const;

  /** PMT type */
  virtual Int_t GetType() const { return type; };
  virtual void SetType(Int_t _type) { type = _type; };

  /** List of photoelectrons created in this PMT. */
  MCPhoton* GetMCPhoton(Int_t i) { return &photon[i]; }
  Int_t GetMCPhotonCount() const { return photon.size(); }
  MCPhoton* AddNewMCPhoton() {
    photon.resize(photon.size() + 1);
    return &photon.back();
  }
  void PruneMCPhoton() { photon.resize(0); }

  /** PMT waveform */
  //  PMTWaveform* GetWaveform() { return &waveform; };
  std::vector<double> GetWaveform() { return waveform;};
  //  void SetWaveform(PMTWaveform _waveform) {_waveform.SetGraph(); waveform = _waveform; };
  void SetWaveform(std::vector<double> _waveform) {waveform = _waveform;};
  void SetDigitizedWaveform(std::vector<unsigned short int> _digitwaveform) {digitWaveForm = _digitwaveform;};
  std::vector<unsigned short int> GetDigitizedWaveform() {return digitWaveForm;};

  /** Total charge as the sum of the charge of all the PE. */
  Float_t GetTotalCharge() const { return qTotal; }
  void SetTotalCharge() { qTotal = this->GetCharge(); }


  ClassDef(MCPMT, 1)

protected:
  Int_t id;
  Int_t type;
  Float_t qTotal;
  Float_t time;
  Float_t feTime;
  std::vector<MCPhoton> photon;
  //  PMTWaveform waveform;
  std::vector<unsigned short int> digitWaveForm;
  std::vector<double> waveform;

};

  } // namespace DS
} // namespace RAT

#endif
